?substring
str = "Rictusempra"
substring(str,1:nchar(str),1:nchar(str))
substring(str,1:nchar(str))
substring(str,1,1:nchar(str))
substring(str,1)
substring(str,1:nchar(str),1:nchar(str))
?str_extract_all
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
str_extract(phylo,'c')
str_extract(phylo,'[d]')
str_extract_all(phylo,'[d]')
str_extract_all(phylo,'^>.*>$')
str_extract_all(phylo,'^[>].*[>]$')
str_extract_all(phylo,'^[>].+[>]$')
str_extract(phylo,'^[>].+[>]$')
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
str_extract(shopping_list, "[a-z]+")
str_extract(shopping_list, "[a-z]{1,4}")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
str_extract(shopping_list, "\\b[a-z]{1,4}\\b")
str_extract(phylo,'^<')
str_extract(phylo,'^[-<]')
str_extract(phylo,'[a-zA-Z]')
str_extract(phylo,'.')
str_extract(phylo,'.*')
str_extract(phylo,'^>.*')
str_extract(phylo,'^[>].*')
str_extract(phylo,'<.*')
str_extract(phylo,'[a-z]+[:.].*?(?=\s)')
str_extract(phylo,'[a-z]+[:.]')
str_extract(phylo,'[a-z]+')
str_extract(phylo,'[a-z]')
str_extract(phylo,'[a-z]+')
str_extract(phylo,'[>][a-z]+')
str_extract(phylo,'[>][a-zA-Z]+')
str_extract(phylo,'[->][a-zA-Z]+')
str_extract(phylo,'[\>][a-zA-Z]+')
str_extract(phylo,'[\\>][a-zA-Z]+')
str_extract(phylo,'[//>][a-zA-Z]+')
str_extract(phylo,'[^>][a-zA-Z]+')
str_extract(phylo,'[^<>][a-zA-Z]+')
str_extract(phylo,'[^<][^>][a-zA-Z]+')
str_extract(phylo,'[^<].*[^>][a-zA-Z]+')
str_extract(phylo,'[^>][a-zA-Z]+')
str_extract(phylo,'[>[a-zA-Z]+')
str_extract(phylo,'[>][a-zA-Z]+')
str_extract(phylo,'<pre>(.*?)</pre>')
str_extract(phylo,'/<([\w]+)[^>]*>(.*?)<\/\1>')
str_extract(phylo,'.*<i>|</i>.*')
str_extract(phylo,'<i>(.*?)</i>')
str_extract(phylo,'<[a-z]+>(.*?)</[a-z]+>')
str_extract(phylo,'.*<[a-z]+>|</[a-z]+>.*')
str_extract(phylo,'/^>(.*?)<$/')
str_extract(phylo,'/^(.*?)$/')
str_extract(phylo,'/(.*?)/')
str_extract(phylo,'/^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/')
str_extract(phylo,'/<.+?>(.+?)<.+?>/')
str_extract(phylo,'>.*')
str_extract(phylo,'>.*/w')
str_extract(phylo,'>.*\w')
str_extract(phylo,'>.*+')
str_extract(phylo,'>.+')
str_extract(phylo,'/>(.+)</')
str_extract(phylo,'/>(.*)</')
str_extract(phylo,'>(.*)<')
str_extract(phylo,'\>(.*)\<')
str_extract(phylo,'/>(.*)/<')
str_extract(phylo,'>(.*)<')
str_extract(phylo,'>(.+)<')
str_extract(phylo,'\\>(.+)\\<')
?strsplit
strsplit('dsfasf',"")
strsplit('dsfasf')
strsplit('dsfasf',"")
strsplit('dsfasf sdfafsd',"")
reverse_chars <-function(str){
#paste(rev(substring(str,1:nchar(str),1:nchar(str))),collapse="")
paste(rev(strsplit(str,""),collapse="")
}
reverse_chars <-function(str){
#paste(rev(substring(str,1:nchar(str),1:nchar(str))),collapse="")
paste(rev(strsplit(str,"")),collapse="")
}
reverse_chars("Rictusempra")
strsplit("Rictusempra","")
rev(strsplit("Rictusempra",""))
rev(strsplit("Rictusempra","")[0])
rev(strsplit("Rictusempra","")[1])
rev(strsplit("Rictusempra","")[[1]])
reverse_chars <-function(str){
#paste(rev(substring(str,1:nchar(str),1:nchar(str))),collapse="")
paste(rev(strsplit(str,"")[[1]]),collapse="")
}
reverse_chars("Rictusempra")
reverse_chars("Lumox Maxima")
reverse_chars("Repello Muggletum")
remove_tag <- function(x){
str_extract(x,'>(.+)')
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.+)<')
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
read_csv
?read_csv
read_csv("codons")
read_csv("/Users/XINHAO_LI/Dropbox/ucb/stat133-su2016/stat133/hw/hw2/codons")
table = read_csv("/Users/XINHAO_LI/Dropbox/ucb/stat133-su2016/stat133/hw/hw2/codons")
View(table)
remove_tag <- function(x){
str_extract(x,'(?<=\>)(.+)(?=<]')
}
remove_tag <- function(x){
str_extract(x,'(?<=\\>)(.+)(?=\\<]')
}
remove_tag(phylo)
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.+)+')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.+)')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'[^>](.+)[^<]$')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.+)[^<]$')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.+)<')
}
remove_tag(phylo)
table[0]
table[1]
table$dna_triplet
table$amino_acid
dna_to_aa <- function(x){
if(str_detect(x,'[CGAT]'){
stop("Invalid DNA sequence")
}
}
dna_to_aa <- function(x){
if (str_detect(x,'[CGAT]') {
stop("Invalid DNA sequence")
}
}
dna_to_aa <- function(x){
if (str_detect(x,'[CGAT]')) {
stop("Invalid DNA sequence")
}
}
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa <- function(x){
if (str_detect(x,'[CGAT].')) {
stop("Invalid DNA sequence")
}
}
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa <- function(x){
if (str_detect(x,'[CGAT]{}')) {
stop("Invalid DNA sequence")
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
str_detect('C','[CGAT]')
str_detect('CC','[CGAT]')
str_detect('G','[CGAT]')
str_detect('GAGCCATGCATT','[CGAT]')
str_detect('UCUGAGAAU','[CGAT]')
remove_tag <- function(x){
str_extract(x,'/<(.*)>/')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'/<(.*?)>/')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'/>(.*?)</')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.*?)<')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'\b>(.*?)<')
}
move_tag(phylo)
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'\B>(.*?)<')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'>(.*?)<')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'\b>(.*?)<')
}
remove_tag(phylo)
remove_tag <- function(x){
str_extract(x,'\B>(.*?)<')
}
remove_tag <- function(x){
str_extract(x,'<\b')
}
remove_tag(phylo)
str_detect('UCUGAGAAU','[^CGAT]')
str_detect('GAGCCATGCATT','[^CGAT]')
str_detect('ATCTAGATAGTAGGC','[^CGAT]')
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
?str_replace_all
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
fruits <- c("one apple", "two pears", "three bananas"ï¼‰
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(fruits, c("a", "e", "i"), "-")
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(fruits, "[aeiou]", c("1", "2", "3"))
str_replace_all('GAGCCATGCATT', table$dna_triplet, table$amino_acid)
?str_subset
fruit <- c("apple", "banana", "pear", "pinapple")
?split
?strsplit
?str_split
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ", n = 3)
str_split(fruits, " and ", n = 2)
str_split_fixed(fruits, " and ", 3)
str_split_fixed(fruits, " and ", 4)
str_split("GAGCCATGCATT", "", n = str_length("GAGCCATGCATT")/3)
str_length("GAGCCATGCATT")
str_split("GAGCCATGCATT", "[GAG]", n = str_length("GAGCCATGCATT")/3)
str_split("GAGCCATGCATT", "[CGAT]{3}", n = str_length("GAGCCATGCATT")/3)
str_split("GAGCCATGCATT", "[^CGAT]{3}", n = str_length("GAGCCATGCATT")/3)
str_split("GAGCCATGCATT", "[CGAT]{3}", n = str_length("GAGCCATGCATT")/3)
?substring
substring("GAGCCATGCATT",seq(1, nchar("GAGCCATGCATT")-1, 3),seq(3, nchar("GAGCCATGCATT"), 3))
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
return(parse(str_replace_all(sub_dna,table$dna_triplet,table$amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
table = read_csv("/Users/XINHAO_LI/Dropbox/ucb/stat133-su2016/stat133/hw/hw2/codons")
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
return(parse(str_replace(sub_dna,table$dna_triplet,table$amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
x = "GAGCCATGCATT"
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
x
sub_dna
str_replace(sub_dna,table$dna_triplet,table$amino_acid)
str_replace_all(sub_dna,table$dna_triplet,table$amino_acid)
dna_triplet = table$dna_triplet
str_replace_all(sub_dna,'GAG','E')
str_replace_all(sub_dna,c('GAG','CCA'),c('E',P))
str_replace_all(sub_dna,c('GAG','CCA'),c('E','P'))
str_replace_all(sub_dna,c('GAG','CCA','TTA'),c('E','P','X'))
str_replace_all(sub_dna,c('CCA','GAG'),c('P','E'))
replace
?str_replace
install.packages('fastmatch')
library(fastmatch)
fmatch(sub_dna,table)
table
fmatch(sub_dna,table)
?str_replace_all
str_replace_all(str_c(fruits, collapse = "---"),
c("one" = 1, "two" = 2, "three" = 3))
fruits <- c("one apple", "two pears", "three bananas")
str_replace_all(str_c(fruits, collapse = "---"),
c("one" = 1, "two" = 2, "three" = 3))
str_replace_all(fruits,c("one" = 1, "two" = 2, "three" = 3))
amino_acid = table$amino_acid
names(amino_acid)=table$dna_triplet
amino_acid
str_replace_all(sub_dna,amino_acid)
str_replace_all("ATCTAGATAGTAGGC",amino_acid)
x = "ATCTAGATAGTAGGC"
x
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
str_replace_all(sub_dna,amino_acid)
amino_acid = table$amino_acid
names(amino_acid)=table$dna_triplet
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
#sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
print(1)
#sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
str_replace_all(sub_dna,amino_acid))
#return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
str_replace_all(sub_dna,amino_acid)
#return(parse(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#str_replace_all(sub_dna,amino_acid)
return(paste(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#str_replace_all(sub_dna,amino_acid)
return(paste(str_replace_all(sub_dna,amino_acid)))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
paste(str_replace_all(sub_dna,amino_acid))
xx = str_replace_all(sub_dna,amino_acid)
xx
paste(xx)
paste(xx,collapse = '')
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#str_replace_all(sub_dna,amino_acid)
return(paste(str_replace_all(sub_dna,amino_acid),collapse = ""))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa <- function(x){
if (str_detect(x,'[^CGAT]')) {
stop("Invalid DNA sequence")
} else {
#sub_dna = substring(x,seq(1, nchar(x)-1, 3),seq(3, nchar(x), 3))
#return(paste(str_replace_all(sub_dna,amino_acid),collapse = ""))
}
}
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
?str_split
str_split("<common>dandelion</common>",pattern = '<(.*?)>')
str_split("<common>dandelion</common>",pattern = '>(.*?)<')
str_split("<common>dandelion</common>",pattern = '<(.*)>')
str_split("<common>dandelion</common>",pattern = '<(.*?)>')
x = "<kingdom>Plantae</kingdom>"
xx = str_split(x,'<(.*?)>')
xx
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
xx = str_split(phylo,'<(.*?)>')
xx
xx = str_extract(phylo,'[^<(.*?)>]')
xx
xx = str_extract(phylo,'^[<(.*?)>]')
xx
xx = str_extract(phylo,'[<(.*?)>]')
x
xx
xx = str_extract(phylo,'<(.*?)>')
xx
xx = str_extract(phylo,'^<(.*?)>')
xx = str_extract(phylo,'^<(.*?)>')
xx
xx = str_extract(phylo,'[^<](.*?)[^>]')
xx
xx = str_extract(phylo,'[^<](.*)[^>]')
xx
xx = str_extract(phylo,'[^<](.*)[^>].+[^>]')
xx
xx = str_extract(phylo,'[^<](.+)[^>]')
xx
xx = str_extract(phylo,'[^<](.8?)[^>]')
xx
xx = str_extract(phylo,'[^<](.10?)[^>]')
xx = str_extract(phylo,'[^<](.9?)[^>]')
xx
xx = str_extract(phylo,'[^<](.*?)[^>]')
xx = str_extract(phylo,'[^<](.*?)')
xx = str_extract(phylo,'[^<](.+?)[^>]')
xx = str_extract(phylo,'^[^<](.+?)[^>]')
xx = str_extract(phylo,'^[^<](.+?)[^>]$')
xx = str_extract(phylo,'^[^<](.*?)[^>]$')
xx = str_extract(phylo,'[^<](.*?)[^>]$')
xx = str_extract(phylo,'[^<](.*?)[^>]')
xx
xx = str_extract(phylo,'<(.*?)>')
xx
xx = str_extract(phylo,'>(.*?)<')
xx
xx = str_extract(phylo,'[^>](.*?)<')
xx
xx = str_extract(phylo,'>(.*?)[^<]')
xx
xx = str_extract(phylo,'[^<](.*?)[^>]')
xx
xx = str_extract(phylo,'[^<](.*?)<]')
xx
xx = str_extract(phylo,'[^<](.*?)<')
xx
xx = str_extract(phylo,'(?<=>)(.*?)(?=<)')
xx
