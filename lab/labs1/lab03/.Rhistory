demo()
1 + 1
2 + 3
1 + 1
2 + 3
5 / 9
print("sdlkjafsl")
1
2
3
4
5
c(1,2,3,4,5,5)
c(1,2,3,4,5,5) + c(2,4,5,6,7,8)
c(1, 2, 3) .* c(1,2,3)
x <- c(1,2,3)
y <- c(4,5,6)
x+y
3+x
x+y
x/y
3*x
3+x
mean(x)
?mean
?mean
mean()
mean
helo
help
c(1,2) == c(1,5)
c(1,2,3) == c(1,5,3)
2 != 1+1
x <- c(1, 3, 5, 7, 9)
x[0]
x[1]
x[19]
x[0]
NA == NA
NA
FALSE == NA
FALSE == NaN
if(NA):
if(NA)
x = 1
if(NA)
x<-1
x = 1
x = c(1,2,3)
x = c(1,2,3,4,5,6,7,8,9)
x[x<6]
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
Answer the following questions programmatically.  You should submit a `.R` file to bCourses and upload a copy of your work to your GitHub account.
# Data
Here is some data about the Raiders during a particular superbowl season
```{r raiders}
scored <- c(14, 14, 9, 14, 28, 13, 13, 24, 17, 6, 24, 0, 24, 13, 26, 14)
against <- c(19, 30, 16, 38, 31, 24, 23, 30, 41, 13, 20, 52, 13, 31, 24, 47)
?summary
clear
ls()
ls()
scored <- c(14, 14, 9, 14, 28, 13, 13, 24, 17, 6, 24, 0, 24, 13, 26, 14)
against <- c(19, 30, 16, 38, 31, 24, 23, 30, 41, 13, 20, 52, 13, 31, 24, 47)
knitr::opts_chunk$set(echo = TRUE)
scored[7]
scored[1:5]
scored[1:16:2]
scored[1:2:16]
x[which(x %% 2 == 0)]
summary(scored)
a <- numeric(10)
a <- numeric(16)
idx <- numeric(16)
rm(a)
?seq
idx <- seq(1,16)
idx
idx <- seq(1,16)
scored[idx%2 ==0]
idx%2
idx%%2
scored[idx%%2 == 0]
scored
scored[-1]
scored[length(scored)]
max(scored)
scored[scored==14]
scored[scored==14 | scored == 13]
scored[scored>= 7 & scored<=21]
?sort
sort(scored,decreasing = TRUE)
avg(scored)
length(scored[scored>20])
len <- length(scored)
scored[len-5:len]
scored[7]
scored
tail(scored,5)
sum(tail(scored,5))
against
scored == against
idx[scored > against]
idx[scored == against]
?diff
scored[scored>14]
diff(scored,lag = 1)
length(diff(scored,lag = 1))
scored - against
(scored - against)[seq%%2 != 0]
(scored - against)[idx%%2 != 0]
scored[7]+ against[7]
sum(tail(scored,5) + tail(scored,5))
idx[scored == against]
sum(tail(scored,5) + tail(scored,5))
sum(tail(scored + scored,5))
tail(scored + scored,5)
scored
against
tail(scored + against,5)
abs(scored - against)[idx%%2 != 0]
idx[scored > against]
idx[scored == against]
sort(scored,decreasing = TRUE)
install.packages("nycflights13")
library(nycflights13)
data(flights)
rm()
ls
ls()
rm(list = ls())
library(nycflights13)
data(flights)
help("flights")
plane_max_ad <- flights$tailnum[which.max(flights$arr_delay)]
plane_max_ad
?which
install.packages("knitr")
q()
?fligner.test
?fligner
help("fligner")
help("flight")
?flights
help(flights)
data(flights)
library(nycflights13)
data(flights)
?flights
num_rows
length(flights)
num_rows = length(flights)
num_vars = length(flights[0])
length(flights)
num_vars = length(flights$flight)
num_vars = length(flights$air_time)
num_vars = length(flights$flight)
num_vars = length(flights$air_time)
longest_dep_delay = flights$tailnum[which.max(flights$dep_delay)]
help(head)
longest_flights = head(sort(flights$dep_delay+flights$arr_delay,decreasing = TRUE),n = 10)
longest_flights
?flights
flights$carrier
flights$carrier[flights$carrier == "UA"]
ua_delay = mean(flights$dep_delay[which(flights$carrier == "UA")])
ua_delay
flights$dep_delay[which(flights$carrier == "UA")]
mean(flights$dep_delay[which(flights$carrier == "UA")])
sum(flights$dep_delay[which(flights$carrier == "UA")])
sum(flights$dep_delay[which(flights$carrier == "UA")][!is.na(flights$dep_delay[which(flights$carrier == "UA")])])
ua_delay = mean(flights$dep_delay[which(flights$carrier == "UA")][!is.na(flights$dep_delay[which(flights$carrier == "UA")])])
mean(flights$dep_delay[which(flights$carrier == "UA")][!is.na(flights$dep_delay[which(flights$carrier == "UA")])])
flights$month
flights$day
flights$year
flights$month
max(flights$month)
longest_flights
num_planes_aa = flights$tailnum[which(flights$carrier == "AA")]
num_planes_aa
num_planes_aa = length(unique(flights$tailnum[which(flights$carrier == "AA")]))
flight[which(flights$origin == "JFK")]
flights[which(flights$origin == "JFK")]
flights$flight[which(flights$origin == "JFK")]
flights$distance[which(flights$origin == "JFK")][flights$distance[which(flights$origin == "JFK")]>1000]
jfk_1000mi = length(flights$distance[which(flights$origin == "JFK")][flights$distance[which(flights$origin == "JFK")]>1000])
jfk_1000mi
length(flights$flight[which(flights$origin=="LGA") & which(flights$dest == "DFW")])
flights$flight[which(flights$origin=="LGA") & which(flights$dest == "DFW")]
num_lga_dfw = length(flights$flight[which(flights$origin=="LGA")][which(flights$dest == "DFW")])
num_lga_dfw
help("data.frame")
ua_delay = mean(flights$dep_delay[which(flights$carrier == "UA")], na.rm=TRUE)  #12.1
longest_dep_delay = flights$tailnum[which.max(flights$dep_delay)]
longest_dep_delay
longest_dep_delay = max(flights$dep_delay),na,rm=TRUE]
longest_dep_delay = max(flights$dep_delay),na,rm=TRUE)
longest_dep_delay = max(flights$dep_delay,na.rm=TRUE)
longest_dep_delay
longest_flights
longest_flights = head(sort(flights$air_time,decreasing = TRUE),n = 10)
longest_flights
num_lga_dfw = length(unique(flights$carrier[which(flights$origin=="LGA")][which(flights$dest == "DFW")])) #8738
num_lga_dfw
a = unique(flights$carrier[which(flights$origin=="LGA")][which(flights$dest == "DFW")])
num_lga_dfw = length(unique(temp[which(flights$dest == "DFW")])) #8738
temp = subset(flights, origin == "LGA")
num_lga_dfw = length(unique(temp[which(flights$dest == "DFW")])) #8738
View(temp)
num_lga_dfw = length(unique(temp[which(temp$dest == "DFW")])) #8738
temp[which(temp$dest == "DFW")]
temp = subset(flights, origin == "LGA" & dest == "DFW")
num_lga_dfw = length(unique(temp$carrier)) #8738
?subset
install.packages("readr")
ls()
rm(list(ls()))
list(ls())
rm(ls())
?any
list("a",1,4)
list(a = 2)
x = list(a = 2)
x
x$a
x = ist("a",1,4)
x = list("a",1,4)
x
x[1]
x[2]
x[[2]]
library(readr)
tents <- read_csv("tents.csv", col_types = "ccnniccc")
# 1. Run `str()` on `tents`.  What information does it tell you? This is a useful function to know.
# 2. What class is `tents`?
# 3. How many rows are in `tents`?
# 4. How many columns are in `tents`?
# 5. What are the names of the columns?
# 6. Display the first 5 rows.
# 7. Display the last 4 rows.
# 8. Find out how to use `quantile` to find the interquartile range (75th percentile - 50th percentile) of the weights of the tents.
# 9. Find the standard deviation of the heights of the `tents`.  Does `R` use `n` or `n-1` in the denominator when calculating standard deviation?
# 10. The weight is given in grams.  Add a new column to the data frame called `weight_lbs` that contains the weight of the tents in pounds.  Remember to overwrite `tents` with your update.
# 11. The height is given in centimeters.  Add a new variable `height_in` to the data frame that contains the height of the tents in inches. Remember to overwrite `tents` with your update.
# 12. How many tents cost more than $400?
# 13. Subset the data frame so that it only contains tents that are valued $300 or less.  Assign the subsetted data frame the name `so_cheap_tents`.
# 14. Of the tents that are more than $300, what percent are `big-agnes` tents?
# 15. Select the `bestuse` column of `tents` in four different ways: using `$`, `[[]]`, position number and `[]`, and variable name and `[]`.
# 16. What is the name of the tend with the best height-to-weight ratio?
# 17. Run `table` with two arguments, `seasons` and `capacity` (this should be one table).  What did it do?
# 18. What type of tent (bestuse) is the most common? Your answer should return only the use and not the count.
# 19. Create a data frame called `kelty` with only data on kelty tents.  Do the same for `big-agnes`.  Then, combine the two data frames.
tents <- read_csv("tents.csv", col_types = "ccnniccc")
tents <- read_csv("tents.csv", col_types = "ccnniccc")
setwd("~/Dropbox/ucb/stat133-su2016/stat133/lab")
tents <- read_csv("tents.csv", col_types = "ccnniccc")
setwd("~/Dropbox/ucb/stat133-su2016/stat133/lab/lab03")
tents <- read_csv("tents.csv", col_types = "ccnniccc")
getwd
getwd()
str(tents)
?str
View(tents)
View(tents)
nrow(tents)
ncol(tents)
?quantile
quantile(tents)
quantile(tents)
quantile(tents,probs = seq(0,1,0,25))
quantile(tents,probs = seq(0,1,0.25))
quantile(tents$weight,probs = seq(0,1,0.25))
quantile(tents$weight)
quantile(tents$weight,probs = seq(0.5,0.75))
x = quantile(tents$weight)
x
typeof(x)
x[50%]
x['50%']
x[['50%']]
sd(tents)
sd(tents$height)
tents$weight_lbs = tents$weight/453.59237
tents$height_in = tents$height*0.393701
tents$height_in
tents$height[which(tents$height>400)]
length(tents$price[which(tents$price>300) & which(tents$brand == 'big-agnes')])/length(tents$price[which(tents$price>300)])
length(subset(tents,price>300,brand == 'big-agnes'))/length(tents$price[which(tents$price>300)])
subset(tents,price>300,brand == 'big-agnes')
subset(tents,price>300 & brand == 'big-agnes')
The percent are `big-agnes` tents that are more than $300 is `r length(subset(tents,price>300 & brand == 'big-agnes'))/length(tents$price[which(tents$price>300)])`
length(subset(tents,price>300 & brand == 'big-agnes'))/length(tents$price[which(tents$price>300)])
x = subset(tents,price >300)
length(x)
View(x)
nrow(subset(tents,price>300 & brand == 'big-agnes'))/length(tents$price[which(tents$price>300)])
tents[["bestuse"]]
tents[6]
tents["bestuse"]
aggregate(tents$name,FUN=tents$height/tents$weight,decreasing=T)
?table
table(x = tents$name,y = tents$height/tents$weight,)
table(x = tents$name,y = tents$height/tents$weight)
list(x = tents$name,y = tents$height/tents$weight)
as.table(list(x = tents$name,y = tents$height/tents$weight))
matrix(x = tents$name,y = tents$height/tents$weight)
matrix(tents$name,tents$height/tents$weight)
tents$height-to-weight = tents$height/tents$weight
tents$height_to_weight = tents$height/tents$weight
table(seasons,capacity)
table(tents$seasons,tents$capacity)
?table
table(tents$bestuse)
max(table(tents$bestuse))
?colnames
?colnames(max(table(tents$bestuse)))
colnames(max(table(tents$bestuse)))
colnames(table(tents$bestuse))
typeof(table(tents$bestuse))
table(tents$bestuse)[59]
names(table(tents$bestuse))
names(table(tents$bestuse))[0]
names(table(tents$bestuse)[0])
names(max(table(tents$bestuse)))
names(table(tents$bestuse)[0])
names(table(tents$bestuse)
)
?names
names(which.max(table(tents$bestuse)))
rbind(subset(tents,brand =='kelty'),subset(tents,brand =='big-agnes'))
kelty = subset(tents,brand =='kelty')
big_agnes = subset(tents,brand =='big-agnes')
rbind(kelty,big_agnes)
names(tents)
View(big_agnes)
head(flights)
